(function(e,t){typeof exports==`object`&&typeof module<`u`?t(exports):typeof define==`function`&&define.amd?define([`exports`],t):(e=typeof globalThis<`u`?globalThis:e||self,t(e.DOMShield={}))})(this,function(exports){var t=class{observer=null;start(){this.observer=new MutationObserver(e=>{e.forEach(e=>{e.type===`childList`&&e.addedNodes.forEach(e=>{if(e.nodeType===Node.ELEMENT_NODE){let t=e;t.classList.contains(`gemini-box`)&&(console.log(`🚨 DOM Shield: Elemento .gemini-box detectado por MutationObserver!`),console.warn(`Elemento sospechoso añadido al DOM:`,t))}})})}),this.observer.observe(document.body,{childList:!0,subtree:!0,attributes:!1})}stop(){this.observer&&=(this.observer.disconnect(),null)}};let n=[{name:`GeminiBoxObserver`,description:`Observer que detecta elementos .gemini-box añadidos dinámicamente al DOM`,execute:()=>{new t().start(),console.log(`🔍 GeminiBoxObserver: Iniciado para detectar elementos .gemini-box`)}},{name:`ParanaUserScript`,description:`Detecta elementos con clase .gemini-box (posible contenido sospechoso)`,execute:()=>{document.querySelector(`.gemini-box`)?(console.log(`🚨 DOM Shield: ParanaUserScript detected!`),console.warn(`Potentially suspicious element found: .gemini-box`)):console.log(`✅ DOM Shield: ParanaUserScript check passed`)},shouldRunOnMutation:e=>Array.from(e.addedNodes).some(e=>e.nodeType===Node.ELEMENT_NODE&&e.classList.contains(`gemini-box`))},{name:`SuspiciousScripts`,description:`Analiza scripts externos de dominios sospechosos`,execute:()=>{let e=document.querySelectorAll(`script[src]`),t=[`suspicious-site.com`,`malware.example`];e.forEach(e=>{let n=e.src;t.some(e=>n.includes(e))&&console.warn(`🚨 DOM Shield: Suspicious script detected:`,n)})},shouldRunOnMutation:e=>Array.from(e.addedNodes).some(e=>e.nodeType===Node.ELEMENT_NODE&&e.tagName===`SCRIPT`)},{name:`IframeDetection`,description:`Detecta y lista todos los iframes en el documento`,execute:()=>{let e=document.querySelectorAll(`iframe`);e.length>0&&(console.log(`🔍 DOM Shield: Found ${e.length} iframe(s)`),e.forEach((e,t)=>{let n=e.src;console.log(`  Iframe ${t+1}: ${n||`No src attribute`}`)}))},shouldRunOnMutation:e=>Array.from(e.addedNodes).some(e=>e.nodeType===Node.ELEMENT_NODE&&e.tagName===`IFRAME`)}];var r=class{observer=null;rules;constructor(e=n){this.rules=e}start(){console.log(`🛡️ DOM Shield: Iniciando observador de seguridad...`),this.executeRules(),this.observer=new MutationObserver(e=>{e.forEach(e=>{e.type===`childList`&&this.executeRulesForMutation(e)})}),this.observer.observe(document.body,{childList:!0,subtree:!0,attributes:!1}),console.log(`✅ DOM Shield: Observador de seguridad activado`)}stop(){this.observer&&(this.observer.disconnect(),this.observer=null,console.log(`🛑 DOM Shield: Observador de seguridad detenido`))}executeRules(){this.rules.forEach(e=>{try{e.execute()}catch(t){console.error(`❌ DOM Shield: Error ejecutando regla ${e.name}:`,t)}})}executeRulesForMutation(e){this.rules.forEach(t=>{try{t.shouldRunOnMutation&&t.shouldRunOnMutation(e)&&t.execute()}catch(e){console.error(`❌ DOM Shield: Error ejecutando regla ${t.name}:`,e)}})}getRulesConfig(){return this.rules.map(e=>({name:e.name,description:e.description}))}};function i(){console.log(`%c🛡️ DOM Shield Demo - Security Observer Test`,`color: #4ECDC4; font-size: 18px; font-weight: bold;`);let e=new r;e.start(),console.log(`%c✅ Observador de seguridad iniciado`,`color: #28a745; font-weight: bold;`),console.log(`🔍 El observador detectará automáticamente cambios en el DOM`),console.log(`⚠️ Prueba añadir contenido sospechoso para ver la detección en acción`),window.domShieldObserver=e}function a(){console.log(`%c🔍 DOM Shield Demo - Specific Rules Configuration`,`color: #FFD93D; font-size: 18px; font-weight: bold;`);let e=new r().getRulesConfig();console.log(`%c📋 Configuración de Reglas de Seguridad:`,`color: #FFD93D; font-weight: bold;`),console.table(e),console.log(`%c🔧 Ejecutando reglas manualmente...`,`color: #4ECDC4; font-weight: bold;`),n.forEach(e=>{console.log(`\n🔍 Ejecutando regla: ${e.name}`),e.execute()})}var o=class{endpoint;isEnabled=!1;reportQueue=[];maxQueueSize=100;constructor(e=`/csp-violations`){this.endpoint=e,this.init()}init(){document.addEventListener(`securitypolicyviolation`,e=>{this.handleCSPViolation(e)}),console.log(`🛡️ DOM Shield CSP Monitor initialized`),console.log(`📍 Reports will be sent to: ${this.endpoint}`)}async handleCSPViolation(e){let t={timestamp:new Date().toISOString(),userAgent:navigator.userAgent,url:window.location.href,violation:{"blocked-uri":e.blockedURI||``,"document-uri":e.documentURI||``,"effective-directive":e.effectiveDirective||``,"original-policy":e.originalPolicy||``,referrer:e.referrer||``,"script-sample":e.sample||``,"status-code":e.statusCode||0,"violated-directive":e.violatedDirective||``},additionalInfo:{lineNumber:e.lineNumber,columnNumber:e.columnNumber,sourceFile:e.sourceFile}};console.warn(`🚨 CSP Violation detected:`,t),this.addToQueue(t),this.isEnabled&&await this.sendReport(t)}addToQueue(e){this.reportQueue.push(e),this.reportQueue.length>this.maxQueueSize&&this.reportQueue.shift()}async sendReport(e){try{let t=await fetch(this.endpoint,{method:`POST`,headers:{"Content-Type":`application/json`},body:JSON.stringify(e)});return t.ok?(console.log(`✅ CSP violation report sent successfully`),!0):(console.error(`❌ Failed to send CSP report:`,t.status),!1)}catch(e){return console.error(`❌ Error sending CSP report:`,e),!1}}enable(){this.isEnabled=!0,console.log(`✅ CSP monitoring enabled`),this.reportQueue.length>0&&(console.log(`📤 Sending ${this.reportQueue.length} queued reports...`),this.reportQueue.forEach(e=>this.sendReport(e)))}disable(){this.isEnabled=!1,console.log(`⏸️ CSP monitoring disabled`)}getQueuedReports(){return[...this.reportQueue]}clearQueue(){let e=this.reportQueue.length;this.reportQueue=[],console.log(`🗑️ Cleared ${e} queued CSP reports`)}async sendQueuedReports(){if(this.reportQueue.length===0){console.log(`📭 No queued reports to send`);return}console.log(`📤 Sending ${this.reportQueue.length} queued reports...`);for(let e of this.reportQueue)if(await this.sendReport(e)){let t=this.reportQueue.indexOf(e);t>-1&&this.reportQueue.splice(t,1)}}getStatus(){return{enabled:this.isEnabled,endpoint:this.endpoint,queuedReports:this.reportQueue.length,maxQueueSize:this.maxQueueSize}}};let s={SecurityObserver:r,testSecurityObserver:i,testSpecificRules:a,CSPMonitor:o};exports.CSPMonitor=o,exports.DOMShield=s,exports.DOMShieldSecurityObserver=r,exports.securityRules=n,exports.testSecurityObserver=i,exports.testSpecificRules=a});